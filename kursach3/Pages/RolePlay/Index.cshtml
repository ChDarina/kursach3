@page
@using Microsoft.AspNetCore.Identity
@using kursach3.Models
@model kursach3.Pages.RolePlay.IndexModel
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<h1>My RolePlays</h1>
<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by Name and Description:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a> |
            <a asp-page="Create">Create New</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort" asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.RolePlaysView[0].Name)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.DescriptionSort" asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.RolePlaysView[0].Description)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.MasterUsernameSort" asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.RolePlaysView[0].MasterUsername)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.CharacterNameSort" asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.RolePlaysView[0].CharacterName)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.RolePlaysView) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                <a asp-page="../UserAccount" asp-route-id="@item.MasterId">@item.MasterUsername</a> 
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CharacterName)
            </td>
            <td>                      
                <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                <a asp-page="./Chat" asp-route-id="@item.Id">Chat</a>   ||   
            @if (item.MasterUsername == User.Identity?.Name)
                    {
                         <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> 
                         @:|
                         <a asp-page="./AddNewPlayer" asp-route-id="@item.Id">Add New Player</a> 
                         @:|
                         <a asp-page="./DeleteRolePlay" asp-route-id="@item.Id">Delete</a> 
                    }
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.RolePlaysView.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.RolePlaysView.HasNextPage ? "disabled" : "";
}

<a asp-page="./FindPeople"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.RolePlaysView.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./FindPeople"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.RolePlaysView.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Next
</a>
